{
  "function": {
    "prefix": "fn",
    "body": ["export function $1($2): $3 {", "\t$0", "}"]
  },
  "arrow function": {
    "prefix": "afn",
    "body": ["export const $1 = ($2): $3 => {", "\t$0", "}"]
  },
  "for loop": {
    "prefix": "for",
    "body": ["for (const $1 of $2) {", "\t$0", "}"]
  },
  "for loop index": {
    "prefix": "fori",
    "body": ["for (let i=$1; i<$2; i++) {", "\t", "}"]
  },
  "usecase": {
    "prefix": "usecase",
    "body": [
      "import { inject, injectable } from 'inversify'",
      "@injectable()",
      "export class $TM_FILENAME_BASE {",
      "\tconstructor(",
      "\t\t$0",
      "\t) {}",
      "\n",
      "\tcall() {",
      "\t\t// Implementation",
      "\t}",
      "}"
    ]
  },
  "inject dependency": {
    "prefix": "inj",
    "body": ["@inject($1) private $2: $1,"]
  }
}
